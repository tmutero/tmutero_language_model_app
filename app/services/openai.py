import openai
from openai import AsyncOpenAI
import os
from app.settings import settings
class OpenAIService:


    def __init__(self, api_key: str = None, model: str = "gpt-4"):
        self.api_key = api_key or settings.OPENAI_API_KEY
        if not self.api_key:
            raise ValueError("An API key must be provided or set in the OPENAI_API_KEY environment variable.")

        self.client = AsyncOpenAI(api_key=self.api_key)
        self.model = model


    async def query(self, prompt: str, max_tokens: int = 150, temperature: float = 0.7) -> str:
        """
        Sends a prompt to the OpenAI API and returns the generated text.
        :param prompt: The prompt text to send to the model.
        :param max_tokens: The maximum number of tokens to generate.
        :param temperature: Sampling temperature to control randomness.
        :return: The text generated by the model.
        """
        try:
            response = await self.client.chat.completions.create(
                model=self.model,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=max_tokens,
                temperature=temperature
            )
            return response.choices[0].message.content.strip()
        except Exception as e:
            raise RuntimeError(f"OpenAI API request failed: {e}")

    async def suggest_grammar_correction(self, text: str) -> str:
        prompt = f"Correct the grammar and spelling of the following text:\n\n{text}\n\nCorrected Text:"
        return await self.query(prompt, max_tokens=150, temperature=0.3)
    async def suggest_summarization(self, text: str) -> str:
        prompt = f"Summarize the following text:\n\n{text}\n\nSummary:"
        return await self.query(prompt, max_tokens=100, temperature=0.5)

    async def suggest_keyword_extraction(self, text: str) -> str:
        prompt = f"Extract the key topics and keywords from the following text:\n\n{text}\n\nKeywords:"
        return await self.query(prompt, max_tokens=60, temperature=0.4)

    async def suggest_text_categorization(self, text: str, categories: list) -> str:
        categories_str = ", ".join(categories)
        prompt = (f"Categorize the following text into one of these categories: {categories_str}.\n\n"
                  f"Text: {text}\n\nCategory:")
        return await self.query(prompt, max_tokens=20, temperature=0.3)

    async def suggest_sentiment_analysis(self, text: str) -> str:
        prompt = f"Analyze the sentiment of the following text and respond with 'Positive', 'Negative', or 'Neutral':\n\n{text}\n\nSentiment:"
        return await self.query(prompt, max_tokens=20, temperature=0.3)

    async def assess_application(self, app_description: str) -> str:
        """
        Analyzes the provided application description in light of the OWASP Top 10 vulnerabilities.
        :param app_description: A description of the application, including its architecture and features.
        :return: A detailed assessment report with potential vulnerabilities.
        """
        prompt = (
            "You are a cybersecurity expert familiar with the OWASP Top 10 vulnerabilities. "
            "Given the following description of a web application, analyze it for security vulnerabilities "
            "including but not limited to:\n"
            "1. Broken Access Control\n"
            "2. Cryptographic Failures\n"
            "3. Injection (including SQL injection and XSS)\n"
            "4. Insecure Design\n"
            "5. Security Misconfiguration\n"
            "6. Vulnerable and Outdated Components\n"
            "7. Identification and Authentication Failures\n"
            "8. Software and Data Integrity Failures\n"
            "9. Security Logging and Monitoring Failures\n"
            "10. Server-Side Request Forgery (SSRF)\n\n"
            f"Application Description: {app_description}\n\n"
            "Provide a detailed report highlighting any vulnerabilities, explaining their risks and suggesting mitigations."
        )
        return await self.query(prompt, max_tokens=300, temperature=0.5)

    async def suggest_mitigations(self, vulnerability_report: str) -> str:

        prompt = (
            "Based on the following vulnerability report, provide a detailed list of mitigation strategies "
            "for each vulnerability. The report includes issues such as Broken Access Control, Cryptographic Failures, "
            "Injection, Insecure Design, and more.\n\n"
            f"Vulnerability Report: {vulnerability_report}\n\n"
            "Mitigation Strategies:"
        )
        return await self.query(prompt, max_tokens=300, temperature=0.5)

    async def explain_vulnerability(self, vulnerability: str) -> str:

        prompt = (
            "Explain the following vulnerability as defined in the OWASP Top 10 and provide mitigation "
            "recommendations. Your explanation should cover what the vulnerability is, how attackers might exploit it, "
            "and what steps can be taken to prevent it.\n\n"
            f"Vulnerability: {vulnerability}\n\n"
            "Explanation and Mitigation:"
        )
        return await self.query(prompt, max_tokens=250, temperature=0.5)


